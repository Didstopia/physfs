
The latest PhysicsFS information and releases can be found at:
  http://icculus.org/physfs/

Building is (ahem) very easy.


ALL PLATFORMS:

Please understand your rights and mine: read the text file LICENSE in the root
of the source tree. If you can't abide by it, delete this source tree now.

If you've got Doxygen (http://www.doxygen.org/) installed, you can run it
 without any command line arguments in the root of the source tree to generate
 the API reference. This is optional. You can browse the API docs online
 here:  http://icculus.org/physfs/docs/



UNIX:
(If you got this code from CVS, run "./bootstrap" first.)

Run ./configure --help and see what features can be optionally enabled or
disabled. "./configure" does its best to pick optimal defaults for your
platform.

Run "make".
As root, run "make install".
If you get sick of the library, run "make uninstall" as root and it will
remove all traces of the library from the system paths.

Primary Unix development is done with GNU/Linux, but PhysicsFS is known to
work out of the box with several flavors of Unix. It it doesn't work, patches
to get it running can be sent to icculus@icculus.org.


BeOS:
Use the "Unix" instructions, above.


AtheOS:
Use the "Unix" instructions, above.


WIN32:
If building with CygWin, mingw32 or something else that uses the GNU
toolchain, follow the Unix instructions, above.

If you're using Visual C++ 6, point it at "physfs.dsp" in the root of the
source tree, and build. This will produce a "physfs.dll" and "physfs.lib"
(shared library and import lib, respectively) in either a "Debug" or
"Release" directory, depending on what configuration you chose to build.
After building the lib, you can make sure it works by building the
"test_physfs.dsp" project file, which will create "test_physfs.exe" in
"Debug" or "Release". This EXE is linked against the DLL you built
previously.

If you're using Visual C++ 6 and want to generate a static LIB file, point
it at "physfs_static.dsp" in the root of the source tree and build.  This
will produce a "physfs_static.lib" in either a "physfs_static_debug"
or a "physfs_static_release" directory, depending on what configuration
you chose to build.  NOPE: "test_physfs.dsp" does not work with the
statically linked build.

Visual Studio.NET users should do the same thing, but use the "physfs.vcproj"
and "test_physfs.vcproj" project files instead.

NOTE: to change build options such as which drivers are loaded (ZIP, QPAK,
etc.) modify the appropriate manifest constants under the Project Settings.
By default the LIB version supports all drivers, but the DLL build does
not support MVL or HOG file formats.

If you're using another compiler, send me a patch when you get it working.  :)

No one's tried building this for a WinCE (PocketPC) platform, but it may or
may not work. Patches are welcome.

If someone is willing to maintain prebuilt PhysicsFS DLLs, I'd like to hear
from you; send an email to icculus@icculus.org.

MACOS 8/9:
Double-click on "CWProjects.sit" in the root of the source tree. This will
unpack into a folder called "Mac Classic Support", which has CodeWarrior 6
project files.

Point CodeWarrior at "physfs.mcp" in that new folder, and build. This will
produce a "PhysicsFS" or "PhysicsFS Debug" shared library, depending on what
configuration you chose to build. After building the lib, you can make sure
it works by building the "test_physfs.mcp" project file, which will create
"test_physfs" or "test_physfs Debug". These binaries are linked against the
DLLs you built previously.

If someone is willing to maintain prebuilt PhysicsFS Shared Libraries for
the Mac, I'd like to hear from you; send an email to icculus@icculus.org.



MACOS X:
You (currently) need to use the freeware Apple Developer Tools, which are
based on the GNU toolchain. Fire up a terminal and run "cc"...if this reports
"no input files" then you've got the tools installed.

Follow the Unix directions, above (configure, make, make install).

If someone is willing to maintain prebuilt PhysicsFS Shared Libraries for
MacOS X, I'd like to hear from you; send an email to icculus@icculus.org.


OS/2:
You need EMX installed. I tried this on a stock Warp 4 install, no fixpaks.
I used the latest EMX and patches (which are several years old now). You need
to install link386.exe (Selective Install, "link object modules" option). Once
EMX is installed correctly, unpack the source to PhysicsFS and run the script
file "makeos2.cmd". I know this isn't ideal, but I wanted to have this build
without users having to hunt down a "make" program (While several exist, EMX
doesn't come with one). If someone wants to hack some REXX to make this a bit
more piccky about recompiling, I'll accept the patch.

If someone is willing to maintain prebuilt PhysicsFS Shared Libraries for
OS/2, I'd like to hear from you; send an email to icculus@icculus.org.


OTHER PLATFORMS:
Many Unix-like platforms might "just work" with the GNU autoconf tools. Some
of these platforms are known to have worked at one time, but have not been
heavily tested, if tested at all. PhysicsFS is, as far as we know, 64-bit and
byteorder clean, and is known to compile on several compilers across many
platforms. To implement a new platform or archiver, please read the
heavily-commented physfs_internal.h and look in the platform/ and archiver/
directories for examples.

--ryan. (icculus@icculus.org)

